# PEP 8 Python Style Guide Summary

## 1. Indentation

- Use **4 spaces** per indentation level.
- Do not use tabs.

```python
def greet(name):
    print(f"Hello, {name}")
```

---

## 2. Maximum Line Length

- Limit all lines to **79 characters**.
- Use implicit line continuation inside parentheses for long lines.

```python
# Good
message = (
    "This is a long message that should be wrapped "
    "within 79 characters."
)
```

---

## 3. Imports

- Use one import per line.
- Follow this import order:
  1. Standard library
  2. Third-party packages
  3. Local application imports

```python
# Good
import os
import sys

# Bad
import os, sys
```

---

## 4. Whitespace in Expressions and Statements

### Around Operators

```python
# Good
x = 1
y = x + 2

# Bad
x=1
y = x  +2
```

### Inside Parentheses, Brackets, Braces

```python
# Good
print(len(items))

# Bad
print ( len( items ) )
```

### After Commas, Colons, and Semicolons

```python
# Good
data = [1, 2, 3]

# Bad
data = [1 ,2 , 3 ]
```

---

## 5. Naming Conventions

| Element              | Convention     | Example           |
|----------------------|----------------|--------------------|
| Variable / Function  | `snake_case`   | `calculate_sum()`  |
| Constant             | `UPPER_CASE`   | `MAX_RETRIES`      |
| Class                | `CamelCase`    | `DataProcessor`    |
| Module / Package     | `lowercase`    | `utils`, `config`  |

---

## 6. Comments and Docstrings

- Use comments to explain **why**, not what.
- Use complete sentences and proper grammar.
- Use triple double quotes (`"""`) for **docstrings**.

```python
# This function calculates tax-included total
def calculate_total(price, tax_rate):
    """Return the price including tax."""
    return price + (price * tax_rate)
```

---

## 7. Blank Lines

- Use **2 blank lines** before top-level function or class definitions.
- Use **1 blank line** between methods inside a class.

```python
# Good

def first_function():
    pass


def second_function():
    pass
```

---

## 8. Other Best Practices

- Avoid trailing whitespace.
- End each file with a single newline.
- Use `is` / `is not` to compare with `None`.

```python
# Good
if value is None:
    return

# Bad
if value == None:
    return
```

---
